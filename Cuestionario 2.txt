1. ¿Qué propone el paradigma orientado a objetos? ¿Qué es un
paradigma?
Es una manera de construir software basada en un nuevo paradigma, propone resolver problemas de realidad a través de identificar 
objetos y relaciones de colaboracion entre ellos.
El objeto y el mensaje son sus elementos fundamentales.
//Comportamiento y objeto elementos fundamentales.

2. Nombre a los pilares del paradigma orientado a objetos.
Abstraccion, encapsulamiento,herencia y polimorfismo.

3. ¿Qué es una clase?
Una clase es una clasificación, clasificamos en base a comportamientos y atributos comunes.
A partir de la clasificacion se crea un vocabulario. 
Es una abstraccion de un objeto.EJEMPLO una clase es un molde de galletitas, cada vez que haces una galletita estas haciendo un objeto pero son diferentes,
tienen diferentes sabores etc.

4. ¿Qué es un objeto? ¿En qué se relacionan con las clases?

En el paradigma de programación orientada a objetos, un objeto es una unidad dentro de un programa de computadores que consta de un estado y de un comportamiento, 
que a su vez constan respectivamente de datos almacenados y de tareas realizables durante el tiempo de ejecución.
Un objeto es una instancia de la clase. Todos los objetos de la misma clase tendran los mismos atributos y operaciones.

5. ¿Qué significa instanciar un objeto?
Se asigna espacio en memoria a un objeto.
No se instancia un objeto se inicializa, un objeto es una instancia de una Clase.

6. Explique qué es la abstracción en el contexto de programación orientada a objetos y cuál es su relación con las clases.
Mecanismo mediante el cual seIgnorancia selectiva, decide que es importante y que no, Se enfoca en lo importante
ignora lo que no es importante. Se utiliza el encapsulamiento para reforzar la abstraccion.

7. ¿Qué son los atributos o estado de un objeto?COMO ES, caracteristicas.
Propiedad y caracteristicas de los objetos.

8. ¿Qué son los métodos de un objeto? QUE HACE
Comportamientos de un objeto. 
Miembros estáticos y de instancia (no estáticos):

9. ¿Qué es un método estático? ¿En qué se diferencia de los métodos de instancia (no estáticos)?
Un método de instancia es el que se invoca siempre sobre una instancia (objeto) de una clase. 
Por ejemplo p1.getNombre(); siendo p1 un objeto de tipo Persona es un método de instancia: para invocarlo necesitamos una instancia de persona. 
Un método de clase es aquel que puede ser invocado sin existir una instancia.

10. ¿Qué es una clase estática? ¿En qué se diferencia de las clases no
estáticas?
Una static class es aquella clase que se usa sin necesidad de realizar una instanciación de la misma. 
Se utiliza como una unidad de organización para métodos no asociados a objetos particulares y separa datos y comportamientos que son independientes de cualquier identidad del objeto.
Las clases estáticas son adecuadas cuando no tienen que almacenar información, sino sólo realizar cálculos o algún proceso que no cambie. 
Los datos de miembros estáticos se almacenan en una zona especial del Heap denominado High Frequency Heap.
En el .NET Framework tenemos ejemplos de clases estáticas como System.Console, System.Math, System.Environment, etc…
Los requisitos a la hora de crear una clase estática son los siguientes:
La clase debe derivar directamente de System.Object porque la herencia se aplica a clases de instancia y como hemos dicho, una clase estática no realiza intanciación alguna.
La clase no debe implementar ningún interfaz ya que que los métodos del interfaz son llamados en una instancia de la clase.
La clase debe definir únicamente miembros estáticos. Cualquier miembro de instancia provocará un error de compilación.
La clase no puede usarse como un campo, como parámetro de un método o como variable local ya que todos estos conceptos refieren a una instancia.
Sólo puede contener constructores estáticos y privados.
Se usa el modificador static para definir una clase o miembro estàtico.

11. ¿Puedo tener miembros estáticos en clases no-estáticas? ¿Puedo
tener miembros no-estáticos en clases estáticas?
Si, no.

12. ¿Necesito instanciar un objeto de la clase para llamar a sus métodos
estáticos?
No.

13. ¿Cuántos valores distintos pueden existir para un campo estático y
cuántos de uno no-estático cuando se crearon 5 instancias de la clase?

14. ¿Se puede usar el operador “this” dentro de un método estático? ¿Se
puede acceder a miembros no-estáticos desde un método estático de
la misma clase? ¿Se puede acceder a miembros estáticos desde un
método de instancia?

15. ¿Se pueden declarar variables estáticas dentro de un método
(locales)?

16. De dos ejemplos de métodos estáticos que pertenezcan a las clases de
.NET Framework.

17. De un ejemplo de un método de instancia que pertenezca a las clases
de .NET Framework.

Namespaces y directivas:

18. ¿Qué es un namespace y cuál es su función principal?
Es una agrupacion logica de clases y otros elementos.Su funcion principal es organizar codigo.

19. ¿Puedo tener distintos namespaces dentro de un mismo proyecto o
ensamblado de .NET?
Es posible, pero no se recomienda.

20. ¿Para qué se usa la directiva using?
Para agregar bibliotecas, permite la llamada a diferentes funciones sin 

21. ¿Para qué se usa la directiva alias?
Para renombrar internamente un namespace.

22. ¿Puedo declarar dos clases independientes/distintas con el mismo
identificador dentro del mismo namespace? ¿Y en namespaces
distintos?
En el mismo no, en distintas si.